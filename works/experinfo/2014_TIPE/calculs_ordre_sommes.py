## calculs ordre Sn

## bibliotheques

from math import *
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

## coeficients binomiaux

def coBino(k,n):
    if k<0 or k>n:
        return(0)
    elif k==0 or k==n:
        return(1)
    else:
        m=min(k,n-k)
        p=1
        for i in range(m):
            p = p*(n-i)
        return (p/factorial(m))


## liste premiers et autres fonctions arithmétiques

def listprime(n):
    if n<2:
        return([])
    else:
        L=[2]
        k=3
        while len(L)<n:
            for d in L:
                if k%d==0:
                    break
                if d==L[-1]:
                    L.append(k)
            k+=2
        return(L)


def primeFactors(n):
    L= listprime(n)
    LP=[]
    for k in L:
        while n%k==0 and n!=1:
            LP.append(k)
            n=floor(n/k)
    return(LP)

def Factorise(n):
    F=[]
    a=0
    while n%2==0:
        a+=1
        n=floor(n/2)
    if a>0:
        F.append((2,a))
    for k in range(3,n+1,2):
        a=0
        while n%k==0 and n!=1:
            a+=1
            n=floor(n/k)
        if a>0:
            F.append((k,a))
    return(F)

def nbDiv(n):
    F=Factorise(n)
    p=1
    for (a,b) in F:
        p=p*(b+1)
    return(p)





## nombre elements Sn d'ordre p premier et graphe

def ordre_premier(p,n):
    som=0
    for k in range(1,floor(n/p)+1):
        som+=coBino(k*p,n)*factorial(k*p)/(p**k)/factorial(k)
    return(som)


def courbe_ordre_premier(p,debut,fin):
    plt.figure()
    X=[]
    Y=[]
    for k in range (debut,fin+1):
        Y.append(ordre_premier(p,k))
        X.append(k)
    plt.plot(X,Y,'bo')
    plt.show()

def equiv_ordre_premier(p,debut,fin):
    X=[]
    Y=[]
    Z=[]
    for k in range (debut,fin+1):
        Y.append(log(ordre_premier(p,k)+1))
        X.append(k)
        Z.append(log((np.e-2)*factorial(k)/(2**(k/2))+1))
    plt.plot(X,Y,'ro',X,Z,'bo')
    plt.show()




## récupération résulatats caml

#chan = open('donnees.txt','r')
#lignes = chan.readlines()

#table = []
#for s in lignes:
#    tableau.append(list(map(int,s.split(','))))

#chan.close

## recuperation brutale
def Tabule_ordres():
    Tableau = [
[1],
[1,1],
[1,3,2],
[1,9,8,6],
[1,25,20,30,24,20],
[1,75,80,180,144,240],
[1,231,350,840,504,1470,720,0,0,504,0,420],
[1,763,1232,5460,1344,10640,5760,5040,0,4032,0,3360,0,0,2688],
[1,2619,5768,30996,3024,83160,25920,45360,40320,27216,0,30240,0,25920,24192,0,0,0,0,18144],
[1,9495,31040,209160,78624,584640,86400,453600,403200,514080,0,403200,0,259200,120960,0,0,0,0,181440,172800,0,0,0,0,0,0,0,0,120960],
[1,35695,142010,1290960,809424,4496030,237600,3326400,2217600,4823280,3628800,4019400,0,2138400,887040,0,0,2217600,0,1995840,1900800,0,0,1663200,0,0,0,1425600,0,2661120],
[1,140151,776600,9753480,4809024,42658440,570240,39916800,26611200,57081024,43545600,80166240,0,14256000,6652800,0,0,26611200,0,15966720,11404800,0,0,19958400,0,0,0,17107200,0,27941760,0,0,0,0,13685760,0,0,0,0,0,0,11404800,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7983360],
[1,568503,4874012,69618120,20787624,371762820,1235520,363242880,259459200,500972472,283046400,965284320,479001600,92664000,79567488,0,0,259459200,0,168648480,98841600,283046400,0,259459200,0,0,0,222393600,0,536215680,0,0,0,0,177914880,172972800,0,0,0,155675520,0,296524800,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103783680],
[1,2390479,27027728,571627056,72696624,3594871280,892045440,3874590720,1695133440,4412103696,1320883200,12173441280,6706022400,6797831040,858329472,0,0,3632428800,0,4104644544,864864000,3962649600,0,4843238400,0,0,0,2075673600,0,6901614720,0,0,2641766400,0,1245404160,2421619200,0,0,0,2179457280,0,3632428800,0,0,1937295360,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1452971520,0,0,0,0,0,0,0,0,0,1245404160,0,0,0,0,0,0,0,0,0,0,0,0,0,1037836800],
[1,10349535,168369110,4443697440,1961583624,38650622010,13348249200,34767532800,16345929600,60619398840,4953312000,162850287600,50295168000,96940443600,93774320640,0,0,63567504000,0,54304810560,5708102400,44579808000,0,72648576000,0,50295168000,0,25297272000,0,90084234240,0,0,39626496000,0,6227020800,36324288000,0,0,0,32691859200,0,49297248000,0,29719872000,29059430400,0,0,0,0,0,0,0,0,0,0,23351328000,0,0,0,29059430400,0,0,0,0,0,0,0,0,0,18681062400,0,0,0,0,0,0,0,0,0,0,0,0,0,15567552000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12454041600],
[1,46206735,1191911840,40027718640,28478346624,396457108320,106757164800,567177811200,161902540800,686638592640,15850598400,2428557331200,268240896000,1622806099200,1456234940160,1307674368000,0,784604620800,0,763017615360,47509862400,396264960000,0,988020633600,0,804722688000,0,255307852800,0,1540714855680,0,0,317011968000,0,24908083200,581188608000,0,0,536481792000,348713164800,0,684972288000,0,475517952000,232475443200,0,0,0,0,0,0,0,0,0,380414361600,373621248000,0,0,0,421361740800,0,0,332107776000,0,0,317011968000,0,0,0,224172748800,0,0,0,0,0,0,0,0,0,0,0,0,0,249080832000,0,0,0,0,0,232475443200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199264665600,0,0,0,0,0,0,0,0,0,0,0,0,0,0,174356582400,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149448499200],
[1,211799311,7678566800,346953934320,238536558624,4330689250160,604924594560,6897521030400,1208560953600,9335025764064,44910028800,32123543612160,1140023808000,18885182659200,12465592339200,22230464256000,20922789888000,11176983417600,0,8562257383680,1644460646400,3368252160000,0,14600749363200,0,10260214272000,0,2928775449600,0,33110649411840,0,0,3592802304000,0,1100937277440,8645180544000,0,0,9120190464000,5928123801600,0,16655204966400,0,8083805184000,3952082534400,0,0,0,0,0,0,6840142848000,0,0,6467044147200,6351561216000,0,0,0,15462522915840,0,0,5645832192000,0,0,10778406912000,0,0,0,7198436044800,0,4940103168000,0,0,0,0,0,0,0,0,0,0,0,5645832192000,0,0,0,0,0,3952082534400,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1693749657600,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2964061900800,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2540624486400,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1693749657600],
[1,997313823,53474964992,3369416698080,1425925698624,53963701424640,2722120577280,98241008785920,50830132953600,104304736815552,115482931200,534678700308480,4104085708800,215863604985600,221172770827008,400148356608000,376610217984000,523845011289600,0,118354285969920,25030696204800,26676557107200,0,224704121241600,0,102602142720000,0,160240815820800,0,554845922991360,0,0,40419025920000,0,18546558750720,120044506982400,0,0,82081714176000,170729965486080,0,255456263462400,0,97005662208000,53353114214400,0,0,0,0,0,0,123122571264000,0,0,58203397324800,76218734592000,0,0,0,262517082347520,0,0,50812489728000,0,98498057011200,169759908864000,0,0,0,110517165158400,0,88921857024000,0,0,0,0,83147710464000,82081714176000,0,0,0,0,0,92097637632000,0,0,0,0,0,53353114214400,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20324995891200,0,0,0,0,58203397324800,0,0,0,0,0,0,0,0,0,53353114214400,0,0,0,0,0,50812489728000,0,0,0,0,0,48502831104000,0,0,0,0,0,0,0,45731240755200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38109367296000,0,0,0,0,0,0,0,0,0,0,0,35568742809600,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60974987673600],
[1,4809701439,418199988338,31421601510336,6764765838624,641211774798510,10344007402560,1138935652807680,866513503215360,1180585704051936,274271961600,8126981741380320,12996271411200,2146286611085760,3141405808998912,5068545850368000,3577797070848000,8971024455993600,6402373705728000,2055161253809664,235053973440000,209269506700800,0,3614691131251200,0,974720355840000,0,2836403081740800,0,8393918663370240,0,0,337903056691200,3577797070848000,422723619901440,2280845632665600,0,0,1039701712896000,2905966287544320,0,4650812238758400,0,1497524910336000,743386724720640,0,0,2534272925184000,0,0,0,2339328854016000,0,0,368621516390400,1448155957248000,0,0,0,6641135949127680,0,0,965437304832000,0,1871463083212800,2918253671424000,0,0,0,3808650167562240,0,1689515283456000,0,0,0,0,1579806498816000,3119105138688000,0,0,0,0,0,2908379880806400,0,0,0,1382330686464000,0,2365321396838400,0,0,0,0,0,0,0,0,0,0,0,0,0,0,241359326208000,0,0,0,0,1105864549171200,0,0,0,0,0,0,0,0,0,1351612226764800,0,0,0,0,0,965437304832000,0,0,0,0,0,921553790976000,0,0,0,0,0,0,0,579262382899200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,737243032780800,0,0,724077978624000,0,0,0,0,0,0,0,0,0,0,0,675806113382400,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1013709170073600,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,289631191449600],
[1,23758664095,3044269834280,328430320909920,189239120970624,8205894865096280,34479959558400,18952720774041600,8470676211379200,29016515871665280,609493248000,128338880777251200,37132204032000,20961032226451200,61842055316670720,101370917007360000,23851980472320000,173359688261760000,128047474114560000,153101632051630080,3030432354892800,1596262816512000,0,84808750650624000,0,8577539131392000,0,53536754988288000,0,141081442901118720,0,0,3515557054464000,71555941416960000,6125354900121600,35962539604992000,0,0,12996271411200000,49430390007398400,0,106259880025728000,0,18891852715008000,11488703927500800,0,0,50685458503680000,0,0,47703960944640000,31191051386880000,0,0,1843107581952000,20274183401472000,0,0,0,133583000860108800,0,0,14481559572480000,0,18714630832128000,50685458503680000,0,0,0,62717220915148800,0,33790305669120000,0,0,0,0,15798064988160000,54584339927040000,0,0,0,0,0,53876765150208000,0,0,0,27646613729280000,0,50685458503680000,26735186903040000,0,0,0,0,0,0,0,24574767759360000,0,0,0,0,0,4441011602227200,0,0,0,0,16587968237568000,0,0,0,0,0,0,0,0,0,27032244535296000,0,0,0,0,0,14481559572480000,0,0,0,18714630832128000,0,18431075819520000,0,0,0,0,0,0,0,9413013722112000,0,0,0,0,0,0,0,0,0,0,0,0,0,15798064988160000,0,15595525693440000,0,0,0,0,0,0,0,0,14744860655616000,0,0,14481559572480000,0,0,0,0,0,0,0,0,0,0,0,13516122267648000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29928556449792000,0,0,0,0,0,0,0,0,0,11058645491712000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9654373048320000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8688935743488000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5792623828992000]]
    return(Tableau)


##  traitement du tableau

def square():
    T=Tabule_ordres().copy()
    Tlen=len(T[-1])
    for K in T:
        while len(K)<Tlen:
            K.append(0)
    return(np.array(T))


def abscisses(L):
    X=[]
    for k in range(1,len(L)+1):
        X.append(k)
    return(X)

def liste_ordrefixe(k):
    S=square()
    L=[]
    n,p = np.shape(S)
    for i in range(0,n):
        L.append(S[i][k-1])
    return(L)

## graphes ordres éléments varient

def disp_ordreVarie(n):
    Y=Tabule_ordres()[n-1]
    X=abscisses(Y)
    plt.plot(X,Y,'ro')
    plt.show()
    return()

def disp_ordreVarie_log(n):
    Y=np.log(square()[n-1]+1)
    X=abscisses(Y)
    plt.plot(X,Y,'ro')
    plt.show()
    return()

## graphes ordres éléments fixe

def disp_ordrefixe(k):
    Y=liste_ordrefixe(k)
    X=abscisses(Y)
    plt.plot(X,Y,'ro')
    plt.show()
    return()

def disp_ordrefixe_log(n):
    Y=np.log(square()[:,n-1]+1)
    X=abscisses(Y)
    plt.plot(X,Y,'ro')
    plt.show()
    return()


## graphes 3d

def disp_tab_ordres():
    Y=np.log(np.log(square()+1)+1)
    plt.imshow(Y, cmap=None, norm=None, aspect='auto')
    plt.show()
    return()

## ordre max

def disp_ordre_max():
    T=Tabule_ordres()
    X=[]
    Y=[]
    Z=[]
    for k in range(len(T)):
        X.append(k+1)
        Y.append(log(len(T[k])+1))
    plt.plot(X,Y,'ro')
    plt.show()
    return()

## génération des partitions

## majordre (heuristique, pas sur)


def majOrdre(n):
    if n<=4:
        return(n)
    L=listprime(n)
    maj=1
    s=0
    k=0
    for k in L:
        if s+k==n:
            return(maj*k*3)
        elif s+k<n:
            maj=maj*k
            s+=k
        else:
            return(maj*(n-s)*3)

## opérations sur les lises et tabuation

def prodlist(L):
    prod=1
    for k in L:
        prod=prod*k
    return(prod)

def prodfacto(L):
    prod=1
    for k in L:
        prod=prod*factorial(k[1])
    return(prod)

def prodpuiss(L):
    prod=1
    for k in L:
        prod=prod*(k[0]**k[1])
    return(prod)

def reduce(L):
    if L==[]:
        return([])
    C=[]
    X=L.copy()
    while X!=[]:
        a=X.pop(0)
        n=X.count(a)
        C.append(a)
        for k in range(n):
            X.remove(a)
    return(C)

def contract(L):
    if L==[]:
        return([])
    C=[]
    X=L.copy()
    while X!=[]:
        a=X.pop(0)
        n=X.count(a)
        C.append([a,n+1])
        for k in range(n):
            X.remove(a)
    return(C)

def support(L):
    n=L.count(1)
    X=L.copy()
    for k in range(n):
        X.remove(1)
    return([X,n])

def supportBis(L):
    X=L.copy()
    while X[-1]==0:
        X.pop(-1)
    return(X)

def tabule(A,n,P):
    [S,un]=support(P)
    R=reduce(S)
    C=contract(S)
    p=int(ppcmList(R))
    val=coBino(n-un,n)*factorial(n-un)/prodpuiss(C)/prodfacto(C)
    A[p-1]=A[p-1]+val
    

## ppcmlist

def pgcd(a,b):
    a,b=max(a,b),min(a,b)
    r=a%b
    while r!=0:
        b,r=r,b%r
    return(b)

def ppcm(a,b):
    return(a*b/pgcd(a,b))

def ppcmList(L):
    if L==[]:
        return(1)
    X=L.copy()
    while len(X)>1:
        a=X.pop(0)
        b=X.pop(0)
        X.append(ppcm(a,b))
    return(X[0])

## génération de l'itérateur des partitions

def accelAsc(n):
    a = [0 for i in range(n + 1)]
    k = 1
    y = n - 1
    while k != 0:
        x = a[k - 1] + 1
        k -= 1
        while 2*x <= y:
            a[k] = x
            y -= x
            k += 1
        l = k + 1
        while x <= y:
            a[k] = x
            a[l] = y
            yield a[:k + 2]
            x += 1
            y -= 1
        a[k] = x + y
        y = x + y - 1
        yield a[:k + 1]
    

## génération liste des ordres dan Sn

def repOrdN(n):
    maj=majOrdre(n)
    A=[0 for k in range(maj+1)]
    for p in accelAsc(n):
        tabule(A,n,p)
    return(supportBis(A))

## génération tableau ordres lignes : Sn colonnes : ordres


def matSnOrd(m):
    M=[]
    for k in range(1,m+1):
        M.append(repOrdN(k))
    return(M)
    


## plus abondant

def plus_abond():
    T=Tabule_ordres().copy()
    Y=[]
    for k in T:
        Y.append(k.index(max(k))+1)
    X=[k for k in range(1,len(Y)+1)]
    plt.plot(X,Y,'ro')
    plt.show()



















